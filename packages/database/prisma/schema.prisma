generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Transaction {
  id          Int                 @id @default(autoincrement())
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  amount      Decimal
  type        TransactionType     @default(INCOME)
  currency    Currency            @default(ARS)
  category    TransactionCategory
  description String?
  author      User                @relation(fields: [authorId], references: [id])
  authorId    String
}

enum TransactionCategory {
  LEISURE
  HEALTH
  HOME
  SUBSCRIPTIONS
  CAR
  FOOD
  SAVINGS
  EDUCATION
  TRAVEL
  WORK
  MISCELLANEOUS
}

enum Currency {
  ARS
  BTC
  USD
  USDT
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum Role {
  USER
  ADMIN
}

// Auth.js differentiates between users and accounts. A user can have multiple accounts. An account is created for ech provider type
// the user signs in with for the first time. If a user signs in with Google and then with Facebook, they will have two accounts, one for 
// each provider.
model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  password      String?
  role          Role          @default(USER)
  transactions  Transaction[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}
